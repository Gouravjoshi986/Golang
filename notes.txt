1.// Static typed language
type must be explicitally mentioned or it should be inferred 
var myName dataType = value 
or 
myName := value 
// You can convert one thing into another using type conversion 

2.// Strongly Typed Language 
int and string cant be added like js. Checking is thorough 

3.// Go is compiled Language not interpreted.

4.// Fast compile time 

5.// Built in concurrency
you dont have to install packages to do stuff around concurrency or threads .
Goroutines is built in the language to do this stuff. 

6.// Simplicity (concise syntax / garbage collection etc)


7. Package - a folder with collection of go files. 
8. Module - a collection of packages 
// when we initialise a project we first initialise a module. done using
// go mod init moduleName
// it also contains all the information about things that we have installed dependencies along with their versions 


9. Creating a File 
// make a file with extension .go 
// initialize a package name on top using 
package main  - this package tells the code to look for main function in this file. 

10. Function creation is done by keyword func functionName(args){ ..code.. }
// package main will give an error if main fucntion is not declared in the file 

11. Printing and other things are located in the "fmt" package . this can be imported using :
// import "fmt" 
eg. fmt.Println(value) // other func in docs

12. // Go files can be compiled using  : go build path/filename.go 
-> this creates a binary file (compiled) which can be run by ./filename

or We can directly use: go run path/filename.go

// we must use whatever we declare in go. 
13. We have data types like 
  1. int int8 int16 int32 int64 
  2. uint unit8 ....
  3. float32 float64
  4. string 
  5. rune
  6. Bool 
// if we use anything outside of range we get compile time error. 
** // But if we do this during Runtime : we dont get any errors it just gives garbage values. (Debugging Hell)

14. Arithmetic opearations : we cant + - * / but we cant do opearations between different data types. If we have to do it we must typecast . 

// on division if in decimal -> rounded down 
// we can also cooncatenate strings

// you can use back ticks to format the string.

15. len("value") -> this doesnt give the number of character in string but rather the no of bytes.  // we can do this using an import called "unicode/utf8"  --> utf8.RuneCountInString("value") -- count no of runes in the string

16. If we dont initialize any value. go assigns them a default value. int,uint,float,rune->0 
string->'' bool -> false

17. We can also create a variable but dont mention the type if we are also initializing it at the same time. This way the type is inferred. 
// eg: var myvar = "text" -> (string) inferred 
// We can drop the var and use shorthand:= 
// myVar := "text" 
// We can also initialize many variables in a row
using =>  name1, name2, name3 = val1, val2, val3


18. We can also run functions in the main functions. and there can not be more than 1 main functions so either you can import the other go files in the main.go file. or keep all files in the same location and use go run .
// we can also pass parameters in the functions. 
// func funcName(param paramDataType){..}
// we can also specify the return type.

// func funcName(param paramDataType)ReturnDataType {
....      
}
// we can also return multiple things at once. 

19. We can use Printf along with %v for strings.

// 20. There is an errors package in golang with error Data type. Its default value is nil. 
// We can use it as a return type and only return something if error is nil. 
// var err error 
// err = errors.New("Error message") (package : errors)

21. // Control Statements - in if else statements 
else must be on the same line as the ending curly bracket. 
// In Switch case statements , the break is by default implied so we dont have to write it.
// switch cases can be conditional or non conditional. 

22. // Arrays : the default values are set to be 0 .  var name [size]dataType 
// we can access it like any other language 
// we can also print the address of the elements using the & symbol.  

// To initialize it while declaring we use : 
// var arr [3]int32 = [3]int32{1,2,3} 
or 
// arr := [3]int32{1,2,3} or arr:= [...]int32{1,2,3}   
// [...] - the compiler will interpret the size

23. // Slices wrap around array to give a more powerful ,convinient interface of sequence of data
// ie - a more advanced kind of array with func
  var intSlice []int32 = []int32{1,2,3}
  .. we can append data : intSlice = append(intSlice,4)

// In this append method . the system checks if there is enough capacity in the slice or not. 
// if not then it creates a new slice and copies the array along with appended element.
// Len and Cap are different in slices. 
// The increase in len is +1. but increase in cap is ??. 

// we can find it using len(sliceName) and cap(sliceName).  : we cant access the out of length things - we get index out of range error.

// we can also use spread operator to append one slice into another. 
// and we can use make function to create a slice. 

24. // MAPS 
 : we can create map using : var name map["key data type"]ValueDataType = make(map["Key data type"]value data type)
 or 
 : var name = map[string]int8{"key1":value1,"key2":value2}

// *  You have to be careful . if you tried to return the value of a key that is not in map , it will simple return default value (0,fasle etc)

// map returns a boolean value along with real value to specify if the given key is in the map or not   :  var age1,ok1 = myMap2["Adam"]

// Go has built in delete for map. 
// delete(mapName,key) -- deletes by reference so no return value 

25. // Loops 
for i,v:= range myArr{
		fmt.Printf("Index: %v Value: %v\n",i,v)
	}  // we can use loops just with a for keyword 
 and use range for iterating over complete DS

 // for while loop we can use an condition after for =>  for i>10 {...do this...}  or for{ if i>10{break} ...do this.. }

 ** // the same thing can be achieved using this syntax 
	for i:=0;i<10;i++{
		fmt.Println(i)
	} 

26. // there is also a time import in go. "time"
// it has functions like * time.Now()  * time.Since('some times stamp')  and return type like time.Duration